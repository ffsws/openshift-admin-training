server {
    server_name registry.cc-openshift.de;

    client_max_body_size 0;
    chunked_transfer_encoding on;
    if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
      return 404;
    }
 
    add_header Docker-Distribution-Api-Version "registry/2.0";


	location / {
		proxy_pass http://127.0.0.1:5000;
	}

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/registry.cc-openshift.de/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/registry.cc-openshift.de/privkey.pem; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


    add_header Strict-Transport-Security    "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options              SAMEORIGIN;
    add_header X-Content-Type-Options       nosniff;
    add_header X-XSS-Protection             "1; mode=block";

    proxy_read_timeout                  900;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
    proxy_set_header    Host                $host;
    proxy_set_header    X-Forwarded-Host    $host;
    proxy_set_header    X-Forwarded-Port    $server_port;

    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    ssl_ecdh_curve              secp384r1;
    ssl_ciphers                 "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384 OLD_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 OLD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
    ssl_prefer_server_ciphers   on;
    #ssl_dhparam                 /etc/nginx/dhparams.pem;
    #ssl_certificate             /etc/ssl/private/fullchain.pem;
    #ssl_certificate_key         /etc/ssl/private/privkey.pem;
    ssl_session_timeout         10m;
    ssl_session_cache           shared:SSL:10m;
    ssl_session_tickets         off;
    ssl_stapling                on;
    ssl_stapling_verify         on;
}

server {
    server_name sso.cc-openshift.de;

    location / {
            proxy_pass http://127.0.0.1:8080;
            include /etc/nginx/proxy_params;
    }

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/sso.cc-openshift.de/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/sso.cc-openshift.de/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}

server {
    if ($host = sso.cc-openshift.de) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name sso.cc-openshift.de;

    listen [::]:80 default_server;
    listen 80 default_server;
    return 404; # managed by Certbot
}

server {
    server_name nexus.cc-openshift.de;

    location / {
            proxy_pass http://127.0.0.1:8081;
            include /etc/nginx/proxy_params;
    }

    listen [::]:443 ssl; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/sso.cc-openshift.de/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/sso.cc-openshift.de/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = nexus.cc-openshift.de) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name nexus.cc-openshift.de;

    listen [::]:80;
    listen 80;
    return 404; # managed by Certbot
}
